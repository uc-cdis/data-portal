//
// !!! DO NOT EDIT !!!!
//
// This file was auto-generated by: node data/gqlSetup.js 
// using the Nunjucks template at data/gqlHelper.js.njx
//      https://mozilla.github.io/nunjucks/
//

import Relay from 'react-relay/classic';
import {app,dev} from './localconf.js';
import {graphql} from 'react-relay';



/**
 * gql database
 */
const helperSingleton = {
  /**
   * Fetch the initial list of projects and global node counts
   */
  homepageQuery: graphql`query gqlHelperHomepageQuery {
        projectList: project(first: 10000) {
          name: project_id
          code
          experimentCount: _{{ experimentType | replace( 'study', 'studies' ) | replace( 'experiment', 'experiments' ) }}_count
        }
        caseCount: _case_count
        experimentCount:  _{{ experimentType }}_count
        aliquotCount: _aliquot_count
        {% for fType in fileTypeList %}
        fileCount{{ loop.index }}: _{{ fType }}_count{% endfor %}
    }`,
  
    projectDetailQuery: graphql`query gqlHelperProjectDetailQuery( $name: [String] ) {
        project( project_id:$name ) {
          name: project_id
          code
          experimentCount:  _{{ experimentType | replace( 'study', 'studies' ) | replace( 'experiment', 'experiments' ) }}_count
        }
        caseCount: _case_count( project_id:$name )
        experimentCount: _{{ experimentType }}_count( project_id:$name )
        aliquotCount: _aliquot_count( project_id:$name )
        {% for fType in fileTypeList %}
        fileCount{{ loop.index }}: _{{ fType }}_count( project_id:$name ){% endfor %}
    }`,

    explorerPageQuery: graphql`query gqlHelperExplorerPageQuery{
        viewer {
            ...gqlHelperExplorerFragment
        }
    }`,

    explorerPageFragment: graphql.experimental`
    fragment gqlHelperExplorerFragment on viewer
    @argumentDefinitions(
        selected_projects: {type: "[String]"},
        selected_file_types: {type: "[String]"},
        selected_file_formats: {type: "[String]"}
    )
    {
      {% for fType in fileTypeList %}
      fileData{{ loop.index }}:{{fType}}(first: 10000, project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
        project_id
        file_name
        data_category
        data_format
        data_type
        file_size
      }{% endfor %}
    }
  `,
  explorerRefreshQuery: graphql.experimental`
    query gqlHelperExplorerRefreshQuery (
      $selected_projects: [String],
      $selected_file_types: [String],
      $selected_file_formats: [String]
    )
    {
      viewer {
        ...gqlHelperExplorerFragment @arguments(selected_projects: $selected_projects,
            selected_file_types: $selected_file_types,
            selected_file_formats: $selected_file_formats
        )
      }
    }
  `,
};


//----------------------------------------------

/**
 * App-aware GQLHelper - delegates to the appropriate helper for the given app
 * based on a compile-time transformation. Relay does not like gql that
 * does not conform to the schema supplied to the relay compiler, so to
 * support different dictionaries in the same app we need to be a little
 * bit clever. 
 */
export class GQLHelper {
  /**
   * Goofy little utility - scans data for keys matching 'fileCount\d+' or 'fileData\d+',
   * and returns a { fileCount: sum-of-fileCounts, fileData:[] concatenation of data }
   * 
   * @param {Object} data
   * @return {fileCount:sum,fileData:Array} 
   */
  static extractFileInfo( data ) {
    const fileCount = Object.keys( data ).filter( key => key.indexOf( "fileCount" ) === 0 ).map( key => data[key] 
    ).reduce( (acc,it) => acc + it, 0 );
    const fileData = Object.keys( data ).filter( key => key.indexOf( "fileData" ) === 0 ).map( key => data[key] 
    ).reduce( 
      (acc,it) => { let result=acc; if( Array.isArray( it ) ) { result = acc.concat( it ) } else { acc.push(it ); } return result }, 
      [] 
    );
    return { fileCount: fileCount, fileData: fileData };
  }


  /**
   * Little singleton factory 
   */
  static getGQLHelper( appName=app ) {
    return helperSingleton;
  }
    
}


