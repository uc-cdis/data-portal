/**
 * gql database
 */
const helperSingleton = {
  /**
   * Fetch the initial list of projects and global node counts
   */
  homepageQuery: graphql`query gqlHelperHomepageQuery {
    projectList: project(first: 10000) {
      name: project_id
      code
    }
    countOne: _case_count
    countTwo:  _sample_count
    countThree: _aliquot_count
    {% for fType in fileTypeList %}
      fileCount{{ loop.index }}: _{{ fType }}_count
    {% endfor %}
  }`,

  projectDetailQuery: graphql`query gqlHelperProjectDetailQuery( $name: [String] ) {
    project( project_id:$name ) {
      name: project_id
      code
    }
    countOne: _case_count( project_id:$name )
    countTwo: _sample_count( project_id:$name )
    countThree: _aliquot_count( project_id:$name )
    {% for fType in fileTypeList %}
      fileCount{{ loop.index }}: _{{ fType }}_count( project_id:$name )
    {% endfor %}
  }`,

  explorerPageQuery: graphql`query gqlHelperExplorerPageQuery{
    viewer {
      ...gqlHelperExplorerFragment
    }
  }`,

  explorerPageFragment: graphql`
    fragment gqlHelperExplorerFragment on viewer
    @argumentDefinitions(
      {% for fType in fileTypeList %}firstValue_{{ fType }}: {type: "Int", defaultValue: 100},
      cursor_{{ fType }}: {type: "Int"},
      {% endfor %}
      selected_projects: {type: "[String]"},
      selected_file_types: {type: "[String]"},
      selected_file_formats: {type: "[String]"}
    )
    {
      {% for fType in fileTypeList %}
      fileData_{{ fType }}:{{fType}}(first: $firstValue_{{ fType }} offset: $cursor_{{ fType }},
      project_id: $selected_projects, data_type: $selected_file_types, data_format: $selected_file_formats) {
        project_id
        file_name
        data_category
        data_format
        data_type
        file_size
      }{% endfor %}
    }
  `,
  explorerRefreshQuery: graphql`
    query gqlHelperExplorerRefreshQuery (
      {% for fType in fileTypeList %}$firstValue_{{ fType }}: Int,
      $cursor_{{ fType }}: Int,
      {% endfor %}
      $selected_projects: [String],
      $selected_file_types: [String],
      $selected_file_formats: [String]
    )
    {
      viewer {
        ...gqlHelperExplorerFragment @arguments(
          {% for fType in fileTypeList %}firstValue_{{ fType }}: $firstValue_{{ fType }},
          cursor_{{ fType }}: $cursor_{{ fType }},
          {% endfor %}
          selected_projects: $selected_projects,
          selected_file_types: $selected_file_types,
          selected_file_formats: $selected_file_formats
        )
      }
    }
  `,
};
