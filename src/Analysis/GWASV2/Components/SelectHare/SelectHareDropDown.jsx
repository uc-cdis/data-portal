import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import { useQueries } from 'react-query';
// import Dropdown from '@gen3/ui-component/dist/components/Dropdown';
import { Spin, Select } from 'antd';
import { fetchConceptStatsByHareSubset, queryConfig } from "../../Shared/cohortMiddlewareApi";
import { useSourceContext } from '../../Shared/Source';
import { pseudoTw } from '../../Shared/constants';
import ACTIONS from '../../Shared/StateManagement/Actions';

const SelectHareDropDown = ({
    selectedHare,
    selectedCohort,
    covariates,
    outcome,
    handleHareChange,
}) => {
    const { source } = useSourceContext();
    const { width } = pseudoTw;
    const [hares, setHares] = useState([]);
    const hareResults = useQueries(outcome.variable_type === "concept" ? [
        {
            queryKey: ['conceptstatsbyhare',
                outcome,
                covariates,
                selectedCohort
            ],
            queryFn: () => fetchConceptStatsByHareSubset(
                selectedCohort.cohort_definition_id,
                covariates,
                outcome,
                source
            ),
            ...queryConfig
        }
    ] :
        [{
            queryKey: ['conceptstatsbyharecase',
                outcome,
                covariates,
                selectedCohort
            ],
            queryFn: () => fetchConceptStatsByHareSubset(
                selectedCohort.cohort_definition_id,
                [...covariates, {
                    variable_type: 'custom_dichotomous',
                    cohort_ids: [
                        selectedCohort.cohort_definition_id,
                        outcome.cohort_ids[0],
                    ],
                    provided_name:
                        'Autogenerated variable for filtering out Control Population',
                }],
                outcome,
                source
            ),
            ...queryConfig
        },
        {
            queryKey: ['conceptstatsbyharecontrol',
                outcome,
                covariates,
                selectedCohort
            ],
            queryFn: () => fetchConceptStatsByHareSubset(
                selectedCohort.cohort_definition_id,
                [...covariates, {
                    variable_type: 'custom_dichotomous',
                    cohort_ids: [
                        selectedCohort.cohort_definition_id,
                        outcome.cohort_ids[1],
                    ],
                    provided_name:
                        'Autogenerated variable for filtering out Case Population',
                }],
                outcome,
                source
            ),
            ...queryConfig
        }]);

    const { status: statusX, data: dataX } = hareResults.at(hareResults.length === 1 ? 0 : -1)

    useEffect(() => {
        setHares(dataX?.concept_breakdown);
    }, [dataX]);

    const onChange = (h) => {
        selectedHare = {
            concept_value: h,
            concept_value_as_concept_id: 2000007032,
            concept_value_name: h + "'s description" // TODO
          }
          console.log('hare selected', selectedHare)
          handleHareChange({ type: ACTIONS.UPDATE_SELECTED_HARE, payload: selectedHare })
    }

    //   const getHareDescriptionBreakdown = (singleHare, allHares) => {
    //     const hareBreakdown = allHares.find((hare) => hare.concept_value === singleHare.concept_value);
    //     return `${hareBreakdown.concept_value_name} (size: ${hareBreakdown.persons_in_cohort_with_value})`;
    //   };


    //   if (data) {
    //     // special case - endpoint returns empty result:
    //     if (data.concept_breakdown == null) {
    //       return (
    //         <React.Fragment>
    //           Error: there are no subjects in this cohort that have data available on all the selected covariates
    //           and phenotype. Please review your selections
    //         </React.Fragment>
    //       );
    //     }
    // normal scenario - there is breakdown data, so show in dropdown:

    return (
        <>
            <button onClick={() => console.log('hares', hareResults, 'HARES', hares)}>hares</button>
            {statusX === "loading" && <Spin />}
            {statusX === "error" && (<>error</>)}
            {statusX === "success" && (
                <Select
                showSearch={true}
                onChange={onChange}
                placeholder='-select one of the ancestry groups below-'
                fieldNames={{ label: 'concept_value_name', value: 'concept_value' }}
                options={hares}
                dropdownStyle={{ ...width.size(800) }}
                filterOption={(searchTerm, option) => (option?.concept_value_name ?? '').toLowerCase().includes(searchTerm.toLowerCase())}
                />
            )}
        </>
    );
};

SelectHareDropDown.propTypes = {
    selectedHare: PropTypes.object.isRequired,
    selectedCohort: PropTypes.object.isRequired,
    outcome: PropTypes.object.isRequired,
    covariates: PropTypes.array.isRequired,
    handleHareChange: PropTypes.func.isRequired,
};

export default SelectHareDropDown;
